package org.pjdbc.sql;

import java.sql.*;
import java.util.*;

public abstract class AbstractStatement extends AbstractWrapper implements Statement {
    private Connection conn;
    private List<Statement> delegates;

    AbstractStatement (Connection conn, Statement... stmts) throws SQLException {
	super(stmts);
	if (stmts.length==0) throw new SQLException();
	this.conn = conn;
	this.delegates = Arrays.asList(stmts);}

    public Connection getConnection () throws SQLException {
	return conn;}
    public ResultSet executeQuery (String sql) throws SQLException {
	List<ResultSet> r = new ArrayList<ResultSet>(); 
	for (Statement d : delegates) r.add(d.executeQuery(sql)); 
	return r.get(0);}
    public ResultSet getGeneratedKeys () throws SQLException {
	for (Statement d : delegates) return d.getGeneratedKeys(); throw new SQLException();}
    public ResultSet getResultSet () throws SQLException {
	for (Statement d : delegates) return d.getResultSet(); throw new SQLException();}
    public SQLWarning getWarnings () throws SQLException {
	for (Statement d : delegates) return d.getWarnings(); throw new SQLException();}
    public boolean execute (String sql) throws SQLException {
	for (Statement d : delegates) return d.execute(sql); throw new SQLException();}
    public boolean execute (String sql, String[] columnNames) throws SQLException {
	for (Statement d : delegates) return d.execute(sql, columnNames); throw new SQLException();}
    public boolean execute (String sql, int autoGeneratedKeys) throws SQLException {
	for (Statement d : delegates) return d.execute(sql, autoGeneratedKeys); throw new SQLException();}
    public boolean execute (String sql, int[] columnIndexes) throws SQLException {
	for (Statement d : delegates) return d.execute(sql, columnIndexes); throw new SQLException();}
    public boolean getMoreResults () throws SQLException {
	for (Statement d : delegates) return d.getMoreResults(); throw new SQLException();}
    public boolean getMoreResults (int current) throws SQLException {
	for (Statement d : delegates) return d.getMoreResults(current); throw new SQLException();}
    public boolean isCloseOnCompletion () throws SQLException {
	for (Statement d : delegates) return d.isCloseOnCompletion(); throw new SQLException();}
    public boolean isClosed () throws SQLException {
	for (Statement d : delegates) return d.isClosed(); throw new SQLException();}
    public boolean isPoolable () throws SQLException {
	for (Statement d : delegates) return d.isPoolable(); throw new SQLException();}
    public int executeUpdate (String sql) throws SQLException {
	for (Statement d : delegates) return d.executeUpdate(sql); throw new SQLException();}
    public int executeUpdate (String sql, String[] columnNames) throws SQLException {
	for (Statement d : delegates) return d.executeUpdate(sql, columnNames); throw new SQLException();}
    public int executeUpdate (String sql, int autoGeneratedKeys) throws SQLException {
	for (Statement d : delegates) return d.executeUpdate(sql, autoGeneratedKeys); throw new SQLException();}
    public int executeUpdate (String sql, int[] columnIndexes) throws SQLException {
	for (Statement d : delegates) return d.executeUpdate(sql, columnIndexes); throw new SQLException();}
    public int getFetchDirection () throws SQLException {
	for (Statement d : delegates) return d.getFetchDirection(); throw new SQLException();}
    public int getFetchSize () throws SQLException {
	for (Statement d : delegates) return d.getFetchSize(); throw new SQLException();}
    public int getMaxFieldSize () throws SQLException {
	for (Statement d : delegates) return d.getMaxFieldSize(); throw new SQLException();}
    public int getMaxRows () throws SQLException {
	for (Statement d : delegates) return d.getMaxRows(); throw new SQLException();}
    public int getQueryTimeout () throws SQLException {
	for (Statement d : delegates) return d.getQueryTimeout(); throw new SQLException();}
    public int getResultSetConcurrency () throws SQLException {
	for (Statement d : delegates) return d.getResultSetConcurrency(); throw new SQLException();}
    public int getResultSetHoldability () throws SQLException {
	for (Statement d : delegates) return d.getResultSetHoldability(); throw new SQLException();}
    public int getResultSetType () throws SQLException {
	for (Statement d : delegates) return d.getResultSetType(); throw new SQLException();}
    public int getUpdateCount () throws SQLException {
	for (Statement d : delegates) return d.getUpdateCount(); throw new SQLException();}
    public int[] executeBatch () throws SQLException {
	for (Statement d : delegates) return d.executeBatch(); throw new SQLException();}
    public void addBatch (String sql) throws SQLException {
	for (Statement d : delegates) d.addBatch(sql); throw new SQLException();}
    public void cancel () throws SQLException {
	for (Statement d : delegates) d.cancel(); throw new SQLException();}
    public void clearBatch () throws SQLException {
	for (Statement d : delegates) d.clearBatch(); throw new SQLException();}
    public void clearWarnings () throws SQLException {
	for (Statement d : delegates) d.clearWarnings(); throw new SQLException();}
    public void close () throws SQLException {
	for (Statement d : delegates) d.close(); throw new SQLException();}
    public void closeOnCompletion () throws SQLException {
	for (Statement d : delegates) d.closeOnCompletion(); throw new SQLException();}
    public void setCursorName (String name) throws SQLException {
	for (Statement d : delegates) d.setCursorName(name); throw new SQLException();}
    public void setEscapeProcessing (boolean enable) throws SQLException {
	for (Statement d : delegates) d.setEscapeProcessing(enable); throw new SQLException();}
    public void setFetchDirection (int direction) throws SQLException {
	for (Statement d : delegates) d.setFetchDirection(direction); throw new SQLException();}
    public void setFetchSize (int rows) throws SQLException {
	for (Statement d : delegates) d.setFetchSize(rows); throw new SQLException();}
    public void setMaxFieldSize (int max) throws SQLException {
	for (Statement d : delegates) d.setMaxFieldSize(max); throw new SQLException();}
    public void setMaxRows (int max) throws SQLException {
	for (Statement d : delegates) d.setMaxRows(max); throw new SQLException();}
    public void setPoolable (boolean poolable) throws SQLException {
	for (Statement d : delegates) d.setPoolable(poolable); throw new SQLException();}
    public void setQueryTimeout (int seconds) throws SQLException {
	for (Statement d : delegates) d.setQueryTimeout(seconds); throw new SQLException();}
}
