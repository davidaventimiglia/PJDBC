package org.pjdbc.sql;

import java.sql.*;
import java.util.*;

public abstract class AbstractStatement extends AbstractWrapper implements Statement {
    private Connection conn;
    private List<Statement> delegates = new ArrayList<Statement>();

    protected List<Statement> getStatements () {
	return delegates;}

    protected ResultSet wrap (ResultSet r) throws SQLException {
	return new AbstractResultSet(this, r){};}

    public AbstractStatement (Statement stmt, Connection conn) throws SQLException {
	super(stmt);
	delegates.add(stmt);
	this.conn = conn;}

    public AbstractStatement (Statement[] stmts, Connection conn) throws SQLException {
	super(stmts);
	delegates = Arrays.asList(stmts);
	this.conn = conn;}

    public Connection getConnection () throws SQLException {return conn;}
    public ResultSet executeQuery (String sql) throws SQLException {ArrayList<ResultSet> rsets = new ArrayList<ResultSet>(); for (Statement s : getStatements()) rsets.add(s.executeQuery(sql)); for (ResultSet r : rsets) return wrap(r); throw new SQLException();}
    public ResultSet getGeneratedKeys () throws SQLException {for (Statement s : getStatements()) return wrap(s.getGeneratedKeys()); throw new SQLException();}
    public ResultSet getResultSet () throws SQLException {for (Statement s : getStatements()) return wrap(s.getResultSet()); throw new SQLException();}
    public SQLWarning getWarnings () throws SQLException {for (Statement s : getStatements()) return s.getWarnings(); throw new SQLException();}
    public boolean execute (String sql) throws SQLException {for (Statement s : getStatements()) return s.execute(sql); throw new SQLException();}
    public boolean execute (String sql, String[] columnNames) throws SQLException {for (Statement s : getStatements()) return s.execute(sql, columnNames); throw new SQLException();}
    public boolean execute (String sql, int autoGeneratedKeys) throws SQLException {for (Statement s : getStatements()) return s.execute(sql, autoGeneratedKeys); throw new SQLException();}
    public boolean execute (String sql, int[] columnIndexes) throws SQLException {for (Statement s : getStatements()) return s.execute(sql, columnIndexes); throw new SQLException();}
    public boolean getMoreResults () throws SQLException {for (Statement s : getStatements()) return s.getMoreResults(); throw new SQLException();}
    public boolean getMoreResults (int current) throws SQLException {for (Statement s : getStatements()) return s.getMoreResults(current); throw new SQLException();}
    public boolean isCloseOnCompletion () throws SQLException {for (Statement s : getStatements()) return s.isCloseOnCompletion(); throw new SQLException();}
    public boolean isClosed () throws SQLException {for (Statement s : getStatements()) return s.isClosed(); throw new SQLException();}
    public boolean isPoolable () throws SQLException {for (Statement s : getStatements()) return s.isPoolable(); throw new SQLException();}
    public int executeUpdate (String sql) throws SQLException {for (Statement s : getStatements()) return s.executeUpdate(sql); throw new SQLException();}
    public int executeUpdate (String sql, String[] columnNames) throws SQLException {for (Statement s : getStatements()) return s.executeUpdate(sql, columnNames); throw new SQLException();}
    public int executeUpdate (String sql, int autoGeneratedKeys) throws SQLException {for (Statement s : getStatements()) return s.executeUpdate(sql, autoGeneratedKeys); throw new SQLException();}
    public int executeUpdate (String sql, int[] columnIndexes) throws SQLException {for (Statement s : getStatements()) return s.executeUpdate(sql, columnIndexes); throw new SQLException();}
    public int getFetchDirection () throws SQLException {for (Statement s : getStatements()) return s.getFetchDirection(); throw new SQLException();}
    public int getFetchSize () throws SQLException {for (Statement s : getStatements()) return s.getFetchSize(); throw new SQLException();}
    public int getMaxFieldSize () throws SQLException {for (Statement s : getStatements()) return s.getMaxFieldSize(); throw new SQLException();}
    public int getMaxRows () throws SQLException {for (Statement s : getStatements()) return s.getMaxRows(); throw new SQLException();}
    public int getQueryTimeout () throws SQLException {for (Statement s : getStatements()) return s.getQueryTimeout(); throw new SQLException();}
    public int getResultSetConcurrency () throws SQLException {for (Statement s : getStatements()) return s.getResultSetConcurrency(); throw new SQLException();}
    public int getResultSetHoldability () throws SQLException {for (Statement s : getStatements()) return s.getResultSetHoldability(); throw new SQLException();}
    public int getResultSetType () throws SQLException {for (Statement s : getStatements()) return s.getResultSetType(); throw new SQLException();}
    public int getUpdateCount () throws SQLException {for (Statement s : getStatements()) return s.getUpdateCount(); throw new SQLException();}
    public int[] executeBatch () throws SQLException {for (Statement s : getStatements()) return s.executeBatch(); throw new SQLException();}
    public void addBatch (String sql) throws SQLException {for (Statement s : getStatements()) s.addBatch(sql); throw new SQLException();}
    public void cancel () throws SQLException {for (Statement s : getStatements()) s.cancel(); throw new SQLException();}
    public void clearBatch () throws SQLException {for (Statement s : getStatements()) s.clearBatch(); throw new SQLException();}
    public void clearWarnings () throws SQLException {for (Statement s : getStatements()) s.clearWarnings(); throw new SQLException();}
    public void close () throws SQLException {for (Statement s : getStatements()) s.close(); throw new SQLException();}
    public void closeOnCompletion () throws SQLException {for (Statement s : getStatements()) s.closeOnCompletion(); throw new SQLException();}
    public void setCursorName (String name) throws SQLException {for (Statement s : getStatements()) s.setCursorName(name); throw new SQLException();}
    public void setEscapeProcessing (boolean enable) throws SQLException {for (Statement s : getStatements()) s.setEscapeProcessing(enable); throw new SQLException();}
    public void setFetchDirection (int direction) throws SQLException {for (Statement s : getStatements()) s.setFetchDirection(direction); throw new SQLException();}
    public void setFetchSize (int rows) throws SQLException {for (Statement s : getStatements()) s.setFetchSize(rows); throw new SQLException();}
    public void setMaxFieldSize (int max) throws SQLException {for (Statement s : getStatements()) s.setMaxFieldSize(max); throw new SQLException();}
    public void setMaxRows (int max) throws SQLException {for (Statement s : getStatements()) s.setMaxRows(max); throw new SQLException();}
    public void setPoolable (boolean poolable) throws SQLException {for (Statement s : getStatements()) s.setPoolable(poolable); throw new SQLException();}
    public void setQueryTimeout (int seconds) throws SQLException {for (Statement s : getStatements()) s.setQueryTimeout(seconds); throw new SQLException();}}
