package org.pjdbc.sql;

import java.sql.*;
import java.util.*;

public abstract class AbstractStatement extends AbstractWrapper implements Statement {

    // Data

    private Connection conn;
    private List<Statement> delegates;

    // Constructors

    AbstractStatement (Connection conn, Statement... stmts) throws SQLException {
	super(stmts);
	if (stmts.length==0) throw new SQLException();
	this.conn = conn;
	this.delegates = Arrays.asList(stmts);}

    // Proxying machinery

    protected ResultSet wrap (ResultSet r) {
	return r;}

    // Statement API

    public Connection getConnection () throws SQLException {
	return conn;}
    public ResultSet executeQuery (String sql) throws SQLException {
	List<ResultSet> r = new ArrayList<ResultSet>(); 
	for (Statement d : delegates) r.add(wrap(d.executeQuery(sql))); 
	return r.get(0);}
    public ResultSet getGeneratedKeys () throws SQLException {
	List<ResultSet> r = new ArrayList<ResultSet>(); 
	for (Statement d : delegates) r.add(d.getGeneratedKeys());
	return r.get(0);}
    public ResultSet getResultSet () throws SQLException {
	List<ResultSet> r = new ArrayList<ResultSet>(); 
	for (Statement d : delegates) r.add(d.getResultSet());
	return r.get(0);}
    public SQLWarning getWarnings () throws SQLException {
	return delegates.get(0).getWarnings();}
    public boolean execute (String sql) throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.execute(sql));
	return r.get(0);}
    public boolean execute (String sql, String[] columnNames) throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.execute(sql, columnNames));
	return r.get(0);}
    public boolean execute (String sql, int autoGeneratedKeys) throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.execute(sql, autoGeneratedKeys));
	return r.get(0);}
    public boolean execute (String sql, int[] columnIndexes) throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.execute(sql, columnIndexes));
	return r.get(0);}
    public boolean getMoreResults () throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.getMoreResults());
	return r.get(0);}
    public boolean getMoreResults (int current) throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.getMoreResults(current));
	return r.get(0);}
    public boolean isCloseOnCompletion () throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.isCloseOnCompletion());
	return r.get(0);}
    public boolean isClosed () throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.isClosed());
	return r.get(0);}
    public boolean isPoolable () throws SQLException {
	List<Boolean> r = new ArrayList<Boolean>();
	for (Statement d : delegates) r.add(d.isPoolable());
	return r.get(0);}
    public int executeUpdate (String sql) throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.executeUpdate(sql);
	return r.get(0);}
    public int executeUpdate (String sql, String[] columnNames) throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.executeUpdate(sql, columnNames);
	return r.get(0);}
    public int executeUpdate (String sql, int autoGeneratedKeys) throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.executeUpdate(sql, autoGeneratedKeys);
	return r.get(0);}
    public int executeUpdate (String sql, int[] columnIndexes) throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.executeUpdate(sql, columnIndexes);
	return r.get(0);}
    public int getFetchDirection () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getFetchDirection();
	return r.get(0);}
    public int getFetchSize () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getFetchSize();
	return r.get(0);}
    public int getMaxFieldSize () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getMaxFieldSize();
	return r.get(0);}
    public int getMaxRows () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getMaxRows();
	return r.get(0);}
    public int getQueryTimeout () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getQueryTimeout();
	return r.get(0);}
    public int getResultSetConcurrency () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getResultSetConcurrency();
	return r.get(0);}
    public int getResultSetHoldability () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getResultSetHoldability();
	return r.get(0);}
    public int getResultSetType () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getResultSetType();
	return r.get(0);}
    public int getUpdateCount () throws SQLException {
	List<Integer> r = new ArrayList<Integer>();
	for (Statement d : delegates) return d.getUpdateCount();
	return r.get(0);}
    public int[] executeBatch () throws SQLException {
	List<Integer[]> r = new ArrayList<Integer[]>();
	for (Statement d : delegates) return d.executeBatch();
	int[] v = new int[r.get(0).length];
	for (int i = 0; i<r.get(0).length; i++) v[i] = r.get(0)[i].intValue();
	return v;}
    public void addBatch (String sql) throws SQLException {
	for (Statement d : delegates) d.addBatch(sql);}
    public void cancel () throws SQLException {
	for (Statement d : delegates) d.cancel();}
    public void clearBatch () throws SQLException {
	for (Statement d : delegates) d.clearBatch();}
    public void clearWarnings () throws SQLException {
	for (Statement d : delegates) d.clearWarnings();}
    public void close () throws SQLException {
	for (Statement d : delegates) d.close();}
    public void closeOnCompletion () throws SQLException {
	for (Statement d : delegates) d.closeOnCompletion();}
    public void setCursorName (String name) throws SQLException {
	for (Statement d : delegates) d.setCursorName(name);}
    public void setEscapeProcessing (boolean enable) throws SQLException {
	for (Statement d : delegates) d.setEscapeProcessing(enable);}
    public void setFetchDirection (int direction) throws SQLException {
	for (Statement d : delegates) d.setFetchDirection(direction);}
    public void setFetchSize (int rows) throws SQLException {
	for (Statement d : delegates) d.setFetchSize(rows);}
    public void setMaxFieldSize (int max) throws SQLException {
	for (Statement d : delegates) d.setMaxFieldSize(max);}
    public void setMaxRows (int max) throws SQLException {
	for (Statement d : delegates) d.setMaxRows(max);}
    public void setPoolable (boolean poolable) throws SQLException {
	for (Statement d : delegates) d.setPoolable(poolable);}
    public void setQueryTimeout (int seconds) throws SQLException {
	for (Statement d : delegates) d.setQueryTimeout(seconds);}}
