// package org.pjdbc.util;

// import java.sql.*;
// import java.util.*;
// import java.util.concurrent.*;

// public abstract class AbstractDelegatingConnection extends AbstractDelegatingWrapper implements Connection {
//     protected abstract List<Connection> getDelegates();
//     public Array createArrayOf (String typeName, Object[] elements) throws SQLException {for (Connection d : getDelegates()) return d.createArrayOf(typeName, elements); throw new SQLException();}
//     public Blob createBlob () throws SQLException {for (Connection d : getDelegates()) return d.createBlob(); throw new SQLException();}
//     public CallableStatement prepareCall (String sql) throws SQLException {for (Connection d : getDelegates()) return d.prepareCall(sql); throw new SQLException();}
//     public CallableStatement prepareCall (String sql, int resultSetType, int resultSetConcurrency) throws SQLException {for (Connection d : getDelegates()) return d.prepareCall(sql, resultSetType, resultSetConcurrency); throw new SQLException();}
//     public CallableStatement prepareCall (String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {for (Connection d : getDelegates()) return d.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability); throw new SQLException();}
//     public Clob createClob () throws SQLException {for (Connection d : getDelegates()) return d.createClob(); throw new SQLException();}
//     public DatabaseMetaData getMetaData () throws SQLException {for (Connection d : getDelegates()) return d.getMetaData(); throw new SQLException();}
//     public Map<String,Class<?>> getTypeMap () throws SQLException {for (Connection d : getDelegates()) return d.getTypeMap(); throw new SQLException();}
//     public NClob createNClob () throws SQLException {for (Connection d : getDelegates()) return d.createNClob(); throw new SQLException();}
//     public PreparedStatement prepareStatement (String sql) throws SQLException {for (Connection d : getDelegates()) return d.prepareStatement(sql); throw new SQLException();}
//     public PreparedStatement prepareStatement (String sql, String[] columnNames) throws SQLException {for (Connection d : getDelegates()) return d.prepareStatement(sql, columnNames); throw new SQLException();}
//     public PreparedStatement prepareStatement (String sql, int autoGeneratedKeys) throws SQLException {for (Connection d : getDelegates()) return d.prepareStatement(sql, autoGeneratedKeys); throw new SQLException();}
//     public PreparedStatement prepareStatement (String sql, int resultSetType, int resultSetConcurrency) throws SQLException {for (Connection d : getDelegates()) return d.prepareStatement(sql, resultSetType, resultSetConcurrency); throw new SQLException();}
//     public PreparedStatement prepareStatement (String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {for (Connection d : getDelegates()) return d.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability); throw new SQLException();}
//     public PreparedStatement prepareStatement (String sql, int[] columnIndexes) throws SQLException {for (Connection d : getDelegates()) return d.prepareStatement(sql, columnIndexes); throw new SQLException();}
//     public Properties getClientInfo () throws SQLException {for (Connection d : getDelegates()) return d.getClientInfo(); throw new SQLException();}
//     public SQLWarning getWarnings () throws SQLException {for (Connection d : getDelegates()) return d.getWarnings(); throw new SQLException();}
//     public SQLXML createSQLXML () throws SQLException {for (Connection d : getDelegates()) return d.createSQLXML(); throw new SQLException();}
//     public Savepoint setSavepoint () throws SQLException {for (Connection d : getDelegates()) return d.setSavepoint(); throw new SQLException();}
//     public Savepoint setSavepoint (String name) throws SQLException {for (Connection d : getDelegates()) return d.setSavepoint(name); throw new SQLException();}
//     public Statement createStatement () throws SQLException {for (Connection d : getDelegates()) return d.createStatement(); throw new SQLException();}
//     public Statement createStatement (int resultSetType, int resultSetConcurrency) throws SQLException {for (Connection d : getDelegates()) return d.createStatement(resultSetType, resultSetConcurrency); throw new SQLException();}
//     public Statement createStatement (int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {for (Connection d : getDelegates()) return d.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability); throw new SQLException();}
//     public String getCatalog () throws SQLException {for (Connection d : getDelegates()) return d.getCatalog(); throw new SQLException();}
//     public String getClientInfo (String name) throws SQLException {for (Connection d : getDelegates()) return d.getClientInfo(name); throw new SQLException();}
//     public String getSchema () throws SQLException {for (Connection d : getDelegates()) return d.getSchema(); throw new SQLException();}
//     public String nativeSQL (String sql) throws SQLException {for (Connection d : getDelegates()) return d.nativeSQL(sql); throw new SQLException();}
//     public Struct createStruct (String typeName, Object[] attributes) throws SQLException {for (Connection d : getDelegates()) return d.createStruct(typeName, attributes); throw new SQLException();}
//     public boolean getAutoCommit () throws SQLException {for (Connection d : getDelegates()) return d.getAutoCommit(); throw new SQLException();}
//     public boolean isClosed () throws SQLException {for (Connection d : getDelegates()) return d.isClosed(); throw new SQLException();}
//     public boolean isReadOnly () throws SQLException {for (Connection d : getDelegates()) return d.isReadOnly(); throw new SQLException();}
//     public boolean isValid (int timeout) throws SQLException {for (Connection d : getDelegates()) return d.isValid(timeout); throw new SQLException();}
//     public int getHoldability () throws SQLException {for (Connection d : getDelegates()) return d.getHoldability(); throw new SQLException();}
//     public int getNetworkTimeout () throws SQLException {for (Connection d : getDelegates()) return d.getNetworkTimeout(); throw new SQLException();}
//     public int getTransactionIsolation () throws SQLException {for (Connection d : getDelegates()) return d.getTransactionIsolation(); throw new SQLException();}
//     public void abort (Executor executor) throws SQLException {for (Connection d : getDelegates()) d.abort(executor);}
//     public void clearWarnings () throws SQLException {for (Connection d : getDelegates()) d.clearWarnings();}
//     public void close () throws SQLException {for (Connection d : getDelegates()) d.close();}
//     public void commit () throws SQLException {for (Connection d : getDelegates()) d.commit();}
//     public void releaseSavepoint (Savepoint savepoint) throws SQLException {for (Connection d : getDelegates()) d.releaseSavepoint(savepoint);}
//     public void rollback () throws SQLException {for (Connection d : getDelegates()) d.rollback();}
//     public void rollback (Savepoint savepoint) throws SQLException {for (Connection d : getDelegates()) d.rollback(savepoint);}
//     public void setAutoCommit (boolean autoCommit) throws SQLException {for (Connection d : getDelegates()) d.setAutoCommit(autoCommit);}
//     public void setCatalog (String catalog) throws SQLException {for (Connection d : getDelegates()) d.setCatalog(catalog);}
//     public void setClientInfo (Properties properties) throws SQLClientInfoException {for (Connection d : getDelegates()) d.setClientInfo(properties);}
//     public void setClientInfo (String name, String value) throws SQLClientInfoException {for (Connection d : getDelegates()) d.setClientInfo(name, value);}
//     public void setHoldability (int holdability) throws SQLException {for (Connection d : getDelegates()) d.setHoldability(holdability);}
//     public void setNetworkTimeout (Executor executor, int milliseconds) throws SQLException {for (Connection d : getDelegates()) d.setNetworkTimeout(executor, milliseconds);}
//     public void setReadOnly (boolean readOnly) throws SQLException {for (Connection d : getDelegates()) d.setReadOnly(readOnly);}
//     public void setSchema (String schema) throws SQLException {for (Connection d : getDelegates()) d.setSchema(schema);}
//     public void setTransactionIsolation (int level) throws SQLException {for (Connection d : getDelegates()) d.setTransactionIsolation(level);}
//     public void setTypeMap (Map<String,Class<?>> map) throws SQLException {for (Connection d : getDelegates()) d.setTypeMap(map);}}
