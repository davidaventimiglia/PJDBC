package org.pjdbc.drivers;

import java.io.*;
import java.lang.reflect.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import org.pjdbc.util.*;

public class LogDriver extends AbstractProxyDriver {
    static {try {DriverManager.registerDriver(new LogDriver());} catch (Exception e) {throw new RuntimeException(e);}}

    protected boolean acceptsSubProtocol (String subprotocol) {
	return "log".equals(subprotocol);}

    protected String getLogName (Statement stmt) throws SQLException {
	return ((Wrapper)stmt.getConnection()).unwrap(Connection.class).getMetaData().getURL();}

    protected Statement proxyStatement (Statement delegate, Connection conn) throws SQLException {
	return new AbstractProxyStatement(delegate, conn) {
	    private void log (String sql) throws SQLException {
		Logger.getLogger(getLogName(this)).info(sql);}
	    public void addBatch (String sql) throws SQLException {
		log(sql); super.addBatch(sql);}
	    public boolean execute (String sql) throws SQLException {
		log(sql); return super.execute(sql);}
	    public boolean execute (String sql, int[] columnIndexes) throws SQLException {
		log(sql); return super.execute(sql, columnIndexes);}
	    public boolean execute (String sql, String[] columnNames) throws SQLException {
		log(sql); return super.execute(sql, columnNames);}
	    public ResultSet executeQuery (String sql) throws SQLException {
		log(sql); return super.executeQuery(sql);}
	    public int executeUpdate (String sql) throws SQLException {
		log(sql); return super.executeUpdate(sql);}
	    public int executeUpdate (String sql, int autoGeneratedKeys) throws SQLException {
		log(sql); return super.executeUpdate(sql, autoGeneratedKeys);}
	    public int executeUpdate (String sql, int[] columnIndexes) throws SQLException {
		log(sql); return super.executeUpdate(sql, columnIndexes);}
	    public int executeUpdate (String sql, String[] columnNames) throws SQLException {
		log(sql); return super.executeUpdate(sql, columnNames);}};}}


