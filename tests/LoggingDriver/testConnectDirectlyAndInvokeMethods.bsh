#!/bin/sh
set -e
bsh -classpath pjdbc.jar <<EOF
    try {
	source("tests/init.bsh");
	import java.io.*;
	import java.sql.*;
	import java.util.*;
	import java.util.logging.*;
	import org.pjdbc.drivers.*;
	getClass("org.pjdbc.drivers.MockDriver");
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	Logger.getLogger("jdbc:mock:foo").setLevel(Level.INFO);
	Logger.getLogger("jdbc:mock:foo").setUseParentHandlers(false);
	Logger.getLogger("jdbc:mock:foo").addHandler(new StreamHandler(out, new SimpleFormatter()));
	Connection c = (Connection)(new LoggingDriver().connect("jdbc:log:jdbc:mock:foo", null));
	MockDriver d = (MockDriver)DriverManager.getDriver("jdbc:mock:foo");
	Statement stmt = c.createStatement();
	stmt.executeQuery("select * from person;");
	stmt.executeQuery("insert into person (last_name, first_name, age) values ('David', 'Ventimiglia', 42);");
	for (Handler h : Logger.getLogger("jdbc:mock:foo").getHandlers()) h.flush();
	assertNotNull(d.getLog("jdbc:mock:foo"));
	assertEquals("executeQuery[select * from person;]\n" +
		     "executeQuery[insert into person (last_name, first_name, age) values ('David', 'Ventimiglia', 42);]", 
		     d.getLog("jdbc:mock:foo"));
	assertEquals("select * from person;\n" +
		     "insert into person (last_name, first_name, age) values ('David', 'Ventimiglia', 42);", 
		     out.toString().trim());
    } catch (e) {System.exit(1);}
EOF

# Local Variables:
# mode: java
# End:
